AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Customer API
Globals:
  Function:
    Timeout: 20
    MemorySize: 512
    Runtime: java11
    Environment:
      Variables:
        PARAM1: VALUE
        # JAVA_TOOL_OPTIONS: -XX:+TieredCompilation -XX:TieredStopAtLevel=1

Resources:
  BucketAnh:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub ${AWS::StackName}-${AWS::AccountId}-${AWS::Region}
  # ErrorDLQueue:
  #   Type: AWS::SNS::Topic
  TopicAnh:
    Type: AWS::SNS::Topic
  CreateCustomerFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: customer
      Handler: com.anhnt.customer.App::createCustomer
      Policies:
        - DynamoDBCrudPolicy:
            TableName: customer
      Events:
        CreateCustomerEvent:
          Type: Api
          Properties:
            Path: /customers
            Method: post

  GetCustomerFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: customer
      Handler: com.anhnt.customer.App::getCustomer
      Policies:
        - DynamoDBReadPolicy:
            TableName: customer
      Events:
        GetCustomerEvent:
          Type: Api
          Properties:
            Path: /customers/{id}
            Method: get

  DeliverMsgFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: customer
      Handler: com.anhnt.customer.DeliverMsg::onMessage
      Policies:
        - S3ReadPolicy:
            BucketName: !Sub ${AWS::StackName}-${AWS::AccountId}-${AWS::Region}
        - SNSPublishMessagePolicy:
            TopicName: !GetAtt TopicAnh.TopicName
      Environment:
        Variables:
          TOPIC_ANH: !Ref TopicAnh
      Events:
        S3Event:
          Type: S3
          Properties:
            Bucket: !Ref BucketAnh
            Events: s3:ObjectCreated:*
  ConsumeMsgFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: customer
      Handler: com.anhnt.customer.DeliverMsg::onSNSMessage
      # DeadLetterQueue:
      #   Type: SNS
      #   TargetArn: !Ref ErrorDLQueue
      Policies:
        - S3ReadPolicy:
            BucketName: !Sub ${AWS::StackName}-${AWS::AccountId}-${AWS::Region}
        - SNSPublishMessagePolicy:
            TopicName: !GetAtt TopicAnh.TopicName
      Events:
        SNSEvent:
          Type: SNS
          Properties:
            Topic: !Ref TopicAnh
